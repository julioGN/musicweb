name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - alpha
          - beta
          - rc

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.RELEASE_TOKEN || github.token }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bump2version
        
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Bump version
      run: |
        bump2version ${{ github.event.inputs.version_type }}
        
    - name: Push changes
      run: |
        git push origin main --tags

  build-and-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Extract version from tag
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        
    - name: Generate changelog
      id: changelog
      run: |
        # Extract changelog for this version
        if [ -f CHANGELOG.md ]; then
          awk '/^## \['"$VERSION"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG=Release $VERSION" >> $GITHUB_OUTPUT
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        body: |
          # MusicWeb ${{ env.VERSION }}
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          
          ```bash
          pip install musicweb==${{ env.VERSION }}
          ```
          
          ## Docker
          
          ```bash
          docker pull musicweb:${{ env.VERSION }}
          ```
          
          ## What's Changed
          
          See the [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
        draft: false
        prerelease: ${{ contains(env.VERSION, 'alpha') || contains(env.VERSION, 'beta') || contains(env.VERSION, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/musicweb:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/musicweb:${{ env.VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  deploy-docs:
    runs-on: ubuntu-latest
    needs: build-and-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
        
    - name: Build documentation
      run: |
        cd docs
        make html
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
        
  notify-release:
    runs-on: ubuntu-latest
    needs: [build-and-release, deploy-docs]
    if: always() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Extract version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        
    - name: Notify success
      if: needs.build-and-release.result == 'success'
      run: |
        echo "‚úÖ Successfully released MusicWeb $VERSION"
        echo "üì¶ PyPI: https://pypi.org/project/musicweb/$VERSION/"
        echo "üê≥ Docker: docker pull musicweb:$VERSION"
        echo "üìö Docs: https://${{ github.repository_owner }}.github.io/musicweb/"
        
    - name: Notify failure
      if: needs.build-and-release.result == 'failure'
      run: |
        echo "‚ùå Release failed for MusicWeb $VERSION"
        exit 1

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'